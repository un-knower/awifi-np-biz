<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context-4.3.xsd
      http://www.springframework.org/schema/tx
      http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
      http://www.springframework.org/schema/aop
      http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<description>数据源配置配置文件</description>
	
	<!-- 数据源 -->
	<bean id="dataSource_np_biz" class="com.alibaba.druid.pool.DruidDataSource"  destroy-method="close">  
        <property name="url" value="${np.biz.db.jdbc.url}" /> <!-- 连接数据库的url -->
        <property name="username" value="${np.biz.db.jdbc.username}" /> <!-- 连接数据库的用户名 -->
        <property name="password" value="${np.biz.db.jdbc.password}" /> <!-- 连接数据库的密码 -->
        <property name="driverClassName" value="${np.biz.db.jdbc.driverClassName}" /> <!-- 这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName -->
        
        <property name="maxActive" value="${np.biz.db.jdbc.maxActive}" /> <!-- 最大连接池数量 -->  
        <property name="initialSize" value="${np.biz.db.jdbc.initialSize}" /> <!-- 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时 -->
        <property name="minIdle" value="${np.biz.db.jdbc.minIdle}" /> <!-- 最小连接池数量 -->
        <property name="maxWait" value="${np.biz.db.jdbc.maxWait}" /> <!-- 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。 -->
  		
  		<!-- 
  			有两个含义：
			1) Destroy线程会检测连接的间隔时间
			2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明
  		 -->
        <property name="timeBetweenEvictionRunsMillis" value="${np.biz.db.jdbc.timeBetweenEvictionRunsMillis}" />
        <property name="minEvictableIdleTimeMillis" value="${np.biz.db.jdbc.minEvictableIdleTimeMillis}" /><!-- 连接保持空闲而不被驱逐的最长时间,单位：毫秒，默认30分钟 -->
        <property name="maxEvictableIdleTimeMillis" value="${np.biz.db.jdbc.maxEvictableIdleTimeMillis}" /> <!--连接空闲时间大于maxEvictableIdleTimeMillis，那么，这连接就会被close掉 --> 
  
        <property name="validationQuery" value="${np.biz.db.jdbc.validationQuery}" /> <!-- 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。 -->
        <property name="validationQueryTimeout" value="${np.biz.db.jdbc.validationQueryTimeout}" /> <!-- 单位：秒，检测连接是否有效的超时时间。底层调用jdbc，Statement对象的void setQueryTimeout(int seconds)方法 -->
        <property name="testWhileIdle" value="${np.biz.db.jdbc.testWhileIdle}" /> <!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
        <property name="testOnBorrow" value="${np.biz.db.jdbc.testOnBorrow}" /> <!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 -->
        <property name="testOnReturn" value="${np.biz.db.jdbc.testOnReturn}" /> <!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
        
        <!-- PSCache开关 -->
        <property name="poolPreparedStatements" value="${np.biz.db.jdbc.poolPreparedStatements}" />
        <!-- 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说20 -->
        <property name="maxOpenPreparedStatements" value="${np.biz.db.jdbc.maxOpenPreparedStatements}" />
        
        <!-- 
        	属性类型是字符串，通过别名的方式配置扩展插件，
			常用的插件有： 监控统计用的filter:stat、日志用的filter:log4j、防御sql注入的filter:wall
         -->
        <property name="filters" value="${np.biz.db.jdbc.filters}" />
        <property name="connectionProperties" value="druid.stat.slowSqlMillis=3000" /><!-- 慢查询设置 -->
        
        <property name="removeAbandoned" value="${np.biz.db.jdbc.removeAbandoned}" /> <!-- 打开removeAbandoned功能 -->  
        <property name="removeAbandonedTimeout" value="${np.biz.db.jdbc.removeAbandonedTimeout}" /> <!-- 1800秒，也就是30分钟 -->  
        <property name="logAbandoned" value="${np.biz.db.jdbc.logAbandoned}" /> <!-- 关闭abanded连接时输出错误日志 -->  
    </bean>
	
	<!-- 事务管理 -->
	<bean id="transactionManager_np_biz"  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource_np_biz" />
	</bean>
	
	<tx:advice id="txAdvice_np_biz" transaction-manager="transactionManager_np_biz" >
		<tx:attributes>
            <tx:method name="get*" propagation="REQUIRED" read-only="true" />
            <tx:method name="add*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="batchAdd*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="batchUpdate*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="batchDelete*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="*" propagation="SUPPORTS" read-only="true" />
        </tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut id="myPointcut_np_biz" 
		     expression="(execution(* com.awifi.np.biz.portalsrv..service.*.*(..))) || 
                         (execution(* com.awifi.np.biz.common..service.*.*(..)))"
                         />
		<aop:advisor advice-ref="txAdvice_np_biz" pointcut-ref="myPointcut_np_biz" />
	</aop:config>

</beans>